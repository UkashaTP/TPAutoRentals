// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPAutoRentals.Server.Data;

#nullable disable

namespace TPAutoRentals.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240203125115_newdb")]
    partial class newdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "bd2bcf0c-20db-474f-8407-5a6b159518bb",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TPAutoRentals.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22f4f49e-81b1-4dd3-8bc0-1716d9f3e8de",
                            Email = "admin@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMI4VCGp7WLMw97rv4ZDb7BgeQun73PuAPNy6+ZflgPXJvQzUABkT5wH0gpOZpqRnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b256d1b8-569a-4514-b7dd-25f93c5cee1a",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        });
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.Booking", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BookComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookCost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BookDTIn")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BookDTOut")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("BookPayment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CusID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OutletExReturn")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CusID");

                    b.HasIndex("OutletExReturn");

                    b.HasIndex("StaffID");

                    b.HasIndex("VehID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.Brand", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BrandContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandWebLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BrandContactNumber = "83298748",
                            BrandCountry = "Japan",
                            BrandIcon = "",
                            BrandName = "Toyota",
                            BrandWebLink = "https://www.toyota.com.sg/",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(2635),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(2650),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            BrandContactNumber = "83294810",
                            BrandCountry = "Germany",
                            BrandIcon = "",
                            BrandName = "BMW",
                            BrandWebLink = "https://www.bmw.com.sg/",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(2653),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(2653),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            BrandContactNumber = "83294810",
                            BrandCountry = "USA",
                            BrandIcon = "",
                            BrandName = "Ford",
                            BrandWebLink = "https://www.regentmotors.com.sg/",
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(2655),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(2655),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusLicenseClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CusPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CusProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            CusLicenseClass = "NO LICENSE",
                            CusName = "John Tan",
                            CusPassword = "John1234",
                            CusUsername = "John1234",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3036),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3036),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            CusLicenseClass = "NO LICENSE",
                            CusName = "Shaun Goh",
                            CusPassword = "Shaun1234",
                            CusUsername = "Shaun1234",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3038),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3039),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            CusLicenseClass = "NO LICENSE",
                            CusName = "Alvin Lim",
                            CusPassword = "Alvin1234",
                            CusUsername = "Alvin1234",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3040),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3041),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.LicenseRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CusID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LReqImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LReqStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CusID");

                    b.HasIndex("StaffID");

                    b.ToTable("LicenseRequests");
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.Model", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("BrandID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModelBodyStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelCostDaily")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelCostHourly")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelFuel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelSeater")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelTransmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransportID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BrandID");

                    b.HasIndex("TransportID");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BrandID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3497),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3497),
                            ModelBodyStyle = "Sedan",
                            ModelCostDaily = "88",
                            ModelCostHourly = "6",
                            ModelFuel = "Hybrid Petrol",
                            ModelImage = "prius.jpg",
                            ModelName = "Prius",
                            ModelSeater = "5-Seater",
                            ModelTransmission = "Automatic",
                            ModelYear = "2018",
                            TransportID = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            BrandID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3504),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3504),
                            ModelBodyStyle = "Sedan",
                            ModelCostDaily = "70",
                            ModelCostHourly = "5",
                            ModelFuel = "Petrol",
                            ModelImage = "vios.png",
                            ModelName = "Vios",
                            ModelSeater = "5-Seater",
                            ModelTransmission = "Automatic",
                            ModelYear = "2020",
                            TransportID = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            BrandID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3507),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3507),
                            ModelBodyStyle = "SUV",
                            ModelCostDaily = "130",
                            ModelCostHourly = "10",
                            ModelFuel = "Petrol",
                            ModelImage = "X5.jpg",
                            ModelName = "X5",
                            ModelSeater = "7-Seater",
                            ModelTransmission = "Automatic",
                            ModelYear = "2022",
                            TransportID = 2,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 4,
                            BrandID = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3510),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3510),
                            ModelBodyStyle = "Station Wagon",
                            ModelCostDaily = "60",
                            ModelCostHourly = "4",
                            ModelFuel = "Petrol",
                            ModelImage = "focus.jpg",
                            ModelName = "Focus",
                            ModelSeater = "5-Seater",
                            ModelTransmission = "Manual",
                            ModelYear = "1998",
                            TransportID = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 5,
                            BrandID = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3512),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3513),
                            ModelBodyStyle = "Coupe",
                            ModelCostDaily = "250",
                            ModelCostHourly = "15",
                            ModelFuel = "Petrol",
                            ModelImage = "mustang.jpg",
                            ModelName = "Mustang",
                            ModelSeater = "5-Seater",
                            ModelTransmission = "Automatic",
                            ModelYear = "2020",
                            TransportID = 1,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.ModelColour", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MCHexCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MCImgBack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MCImgFront")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MCImgSide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MCName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModelID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ModelID");

                    b.ToTable("ModelColours");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3276),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3277),
                            MCHexCode = "#ff0000",
                            MCImgSide = "prius.jpg",
                            MCName = "Red",
                            ModelID = 1,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3280),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3280),
                            MCHexCode = "#0000ff",
                            MCImgSide = "vios.png",
                            MCName = "Blue",
                            ModelID = 2,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3282),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3283),
                            MCHexCode = "#00ff00",
                            MCImgSide = "X5.jpg",
                            MCName = "Green",
                            ModelID = 3,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3284),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3284),
                            MCHexCode = "#ffff00",
                            MCImgSide = "focus.jpg",
                            MCName = "Yellow",
                            ModelID = 4,
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3286),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3286),
                            MCHexCode = "#ff00ff",
                            MCImgSide = "mustang.jpg",
                            MCName = "Magenta",
                            ModelID = 5,
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.Outlet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ManagerID")
                        .HasColumnType("int");

                    b.Property<string>("OutletAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID")
                        .IsUnique()
                        .HasFilter("[ManagerID] IS NOT NULL");

                    b.ToTable("Outlets");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3708),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3709),
                            ManagerID = 1,
                            OutletAddress = "Pasir Ris",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3711),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3711),
                            ManagerID = 2,
                            OutletAddress = "Tampines",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3713),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(3713),
                            ManagerID = 3,
                            OutletAddress = "Woodlands",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.Staff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OutletID")
                        .HasColumnType("int");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StaffPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StaffProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4132),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4133),
                            OutletID = 1,
                            StaffName = "Bryan Tan",
                            StaffPassword = "Bryan1234",
                            StaffProfileImage = "",
                            StaffRole = "Manager",
                            StaffStatus = "Available",
                            StaffUsername = "Bryan1234",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4135),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4136),
                            OutletID = 2,
                            StaffName = "Ukasha Putra Samad",
                            StaffPassword = "Ukasha1234",
                            StaffProfileImage = "",
                            StaffRole = "Manager",
                            StaffStatus = "Available",
                            StaffUsername = "Ukasha1234",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4138),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4138),
                            OutletID = 3,
                            StaffName = "Tom",
                            StaffPassword = "Tom1234",
                            StaffProfileImage = "",
                            StaffRole = "Chauffeur",
                            StaffStatus = "Available",
                            StaffUsername = "Tom1234",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4140),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4141),
                            OutletID = 1,
                            StaffName = "James",
                            StaffPassword = "James1234",
                            StaffProfileImage = "",
                            StaffRole = "Chauffeur",
                            StaffStatus = "Available",
                            StaffUsername = "James1234",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4142),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4143),
                            OutletID = 3,
                            StaffName = "Harry",
                            StaffPassword = "Harry1234",
                            StaffProfileImage = "",
                            StaffRole = "Chauffeur",
                            StaffStatus = "Available",
                            StaffUsername = "Harry1234",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.Transport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransportName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Transports");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4335),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4336),
                            TransportName = "Cars",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4337),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4337),
                            TransportName = "Vans",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4339),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4339),
                            TransportName = "Trucks",
                            UpdatedBy = "System"
                        },
                        new
                        {
                            ID = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4340),
                            DateUpdated = new DateTime(2024, 2, 3, 20, 51, 15, 233, DateTimeKind.Local).AddTicks(4341),
                            TransportName = "Buses",
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.Vehicle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MCID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("OutletID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehAvailability")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehPlateNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MCID");

                    b.HasIndex("OutletID");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TPAutoRentals.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TPAutoRentals.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPAutoRentals.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TPAutoRentals.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.Booking", b =>
                {
                    b.HasOne("TPAutoRentals.Shared.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPAutoRentals.Shared.Domain.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletExReturn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPAutoRentals.Shared.Domain.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffID");

                    b.HasOne("TPAutoRentals.Shared.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehID");

                    b.Navigation("Customer");

                    b.Navigation("Outlet");

                    b.Navigation("Staff");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.LicenseRequest", b =>
                {
                    b.HasOne("TPAutoRentals.Shared.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPAutoRentals.Shared.Domain.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffID");

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.Model", b =>
                {
                    b.HasOne("TPAutoRentals.Shared.Domain.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPAutoRentals.Shared.Domain.Transport", "Transport")
                        .WithMany()
                        .HasForeignKey("TransportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.ModelColour", b =>
                {
                    b.HasOne("TPAutoRentals.Shared.Domain.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.Outlet", b =>
                {
                    b.HasOne("TPAutoRentals.Shared.Domain.Staff", "Staff")
                        .WithOne("Outlet")
                        .HasForeignKey("TPAutoRentals.Shared.Domain.Outlet", "ManagerID");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.Vehicle", b =>
                {
                    b.HasOne("TPAutoRentals.Shared.Domain.ModelColour", "ModelColour")
                        .WithMany()
                        .HasForeignKey("MCID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPAutoRentals.Shared.Domain.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelColour");

                    b.Navigation("Outlet");
                });

            modelBuilder.Entity("TPAutoRentals.Shared.Domain.Staff", b =>
                {
                    b.Navigation("Outlet");
                });
#pragma warning restore 612, 618
        }
    }
}
