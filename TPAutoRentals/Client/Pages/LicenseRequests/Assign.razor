@page "/licenserequests/assignclass/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager

@if(staffisvalid){
    <h3>Assign</h3>

    <EditForm Model="@customer">
        <DataAnnotationsValidator />
        <ValidationSummary />
            @if (customer != null)
            {
                <div class="form-group">
                    <label>Booking Type: </label>
                    <div>
                        <InputSelect @bind-Value="customer.CusLicenseClass" class="form-control">
                            <option value="">-- Select License Class --</option>
                            <option value="Class 3">Class 3</option>
                            <option value="Class 3A">Class 3A</option>
                            <option value="Class 3C">Class 3C</option>
                            <option value="Class 3CA">Class 3CA</option>
                            <option value="Class 4">Class 4</option>
                            <option value="Class 4A">Class 4A</option>
                        </InputSelect>
                    </div>
                </div>

                <button type="submit" @onclick="AssignCustomerClass" class="btn btn-success btn-block">Set Customer's Class</button>
            }
    </EditForm>
}
else
{
    @*Staff verification for authorization to assign customer's license class*@
    <header>Please Log in as Staff to access this</header>

    <div class="form-group">
        <label>Enter Staff Name: </label>
        <div>
            <InputText @bind-Value="@staffusername" class="form-control" />
        </div>
    </div>

    <div class="form-group">
        <label>Enter Staff Password: </label>
        <div>
            <InputText @bind-Value="@staffpassword" class="form-control" />
        </div>
    </div>

    @if (showError)
    {
        <p style="color: red;">Wrong Username or Password. Please try again</p>
    }

    <a @onclick="CheckValidation" type="submit" class="btn btn-success btn-block">
        Enter PIN
    </a>
}
<BackToList Target="licenserequests" />

@code {
    Customer? customer = new Customer();
    [Parameter] public int id { get; set; }
    IList<LicenseRequest>? LicenseRequests = new List<LicenseRequest>();

    protected async override Task OnParametersSetAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
        customer = await _client.GetFromJsonAsync<Customer>($"{Endpoints.CustomersEndpoint}/{id}");
        LicenseRequests = await _client.GetFromJsonAsync<List<LicenseRequest>>($"{Endpoints.LicenseRequestsEndpoint}");
    }

    async Task AssignCustomerClass()
    {
        if(LicenseRequests != null && customer.CusLicenseClass != "NO LICENSE")
        {
            foreach (var lr in LicenseRequests)
            {
                if (lr.CusID == id)
                {
                    lr.LReqStatus = "APPROVED";
                    lr.StaffID = staffid;
                    await _client.PutAsJsonAsync($"{Endpoints.LicenseRequestsEndpoint}/{lr.ID}", lr);
                    break;
                }
            }
        }
        await _client.PutAsJsonAsync($"{Endpoints.CustomersEndpoint}/{id}", customer);
        _navManager.NavigateTo("/licenserequests/");
    }

    private List<Staff>? Staffs;

    private int? staffid;
    private string? staffusername;
    private string? staffpassword;
    private bool showError = false;
    private bool staffisvalid = false;


    private void CheckValidation()
    {

        if (Staffs != null)
        {
            foreach (var staff in Staffs)
            {
                if (staffusername == staff.StaffName && staffpassword == staff.StaffPassword)
                {
                    staffisvalid = true;
                    staffid = staff.ID;
                }
                else
                {
                    showError = true;
                }
            }
        }
    }
}
