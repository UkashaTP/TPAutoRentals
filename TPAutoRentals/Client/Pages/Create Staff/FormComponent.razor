@inject HttpClient _client

<EditForm Model="@staff" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />



    <fieldset disabled="@Disabled">

        <div class="form-group">
            <label>Staff Name: </label>
            <div>
                <InputText @bind-Value="@staff.StaffName" class="form-control" />
                <ValidationMessage For="@(() => staff.StaffName)" />
            </div>
        </div>

        <div class="form-group">
            <label>Staff User Name: </label>
            <div>
                <InputText @bind-Value="@staff.StaffUsername" class="form-control" />
                <ValidationMessage For="@(() => staff.StaffUsername)" /> 
            </div>
        </div>

        <div class="form-group">
            <label>Staff Password: </label>
            <div>
                <InputText @bind-Value="@staff.StaffPassword" class="form-control" />
                <ValidationMessage For="@(() => staff.StaffPassword)" />
            </div>
        </div>

        <div class="form-group">
            <label>Staff Profile Picture: </label>
            <div>
                <InputFile OnChange="@UploadFile" />
                <img src="Images/@staff.StaffProfileImage" alt="@staff.StaffProfileImage" width="200" />
            </div>
        </div>

    </fieldset>


    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }


    <BackToList Target="staffs" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Staff? staff { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Staff>? Staffs;

    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        foreach (var imageFile in e.GetMultipleFiles(1))
        {
            try
            {
                var content = new MultipartFormDataContent();
                var fileContent = new StreamContent(imageFile.OpenReadStream(maxFileSize));
                content.Add(fileContent, "file", imageFile.Name);

                var response = await _client.PostAsync("api/FileUpload", content);
                if (response.IsSuccessStatusCode)
                {
                    staff.StaffProfileImage = imageFile.Name;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Upload failed: {ex.Message}");
            }
        }
    }

    private long maxFileSize = 1024 * 1024 * 15;
}